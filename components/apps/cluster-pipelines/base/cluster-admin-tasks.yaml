apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: validate-manifests
spec:
  params:
    - name: source-dirs
      default: 
      - /source
      type: array
  resources:
    inputs:
      - name: source
        type: git
  results:
    - name: status
      description: Status can be one of ['Passed','Failed']
  steps:
    - name: process-source-repo
      image: argoproj/argocd:v2.0.5
      workingDir: /workspace/source
      args: [ "$(params.source-dirs)" ]
      script: |
          #!/bin/bash

          result=success

          check_options() {
            local value=$1
            shift
            local options=("$@")
            for option in $options
            do
              if [ $option == $value ] ; then
                return 0
              fi
            done 
            return 1;
          }

          validate_kustomize() {
            local component_path=$1
            pushd $component_path
            $(kustomize build .); RESULT=$?
            popd
            return $RESULT
          }

          for component in "$@"
          do
            COMP_NAME=$(echo "$component" | sed 's/\(^.*\)(\(.*\))/\1/g')
            COMP_OPTIONS=$(echo "$component" | sed 's/\(^.*\)(\(.*\))/\2/g' | tr "," "\n")
            echo "About to process ${COMP_NAME}"
            echo "With options:"
            for option in $COMP_OPTIONS
            do
              KEY=$(echo $option | sed 's/\(^.*\)=\(.*\)/\1/g')
              VALUE=$(echo $option | sed 's/\(^.*\)=\(.*\)/\2/g')
              echo "  ${KEY}: ${VALUE}"
            done

            check_options "validate" "${COMP_OPTIONS[@]}"
            if [ $? -eq 1 ] ; then
              echo "Validating ${COMP_NAME} YAMLs."
              validate_kustomize $COMP_NAME
              if [ $? -eq 1 ] ; then
                echo "Validation successful."
              else
                echo "Failed validation."
                result=failure
              fi
            fi
          done

          echo -n $result >> $(results.status.path)
---
apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: set-build-status
spec:
  params:
    - name: git-status-url
      type: string
    - name: git-revision
      type: string
    - name: build-status
      type: string
    - name: build-status-descr
      type: string
  steps:
    - name: process-source-repo
      image: quay.io/openshift/origin-cli:latest
      workingDir: /
      env:
        - name: GIT_USER
          valueFrom:
            secretKeyRef:
              name: git-credentials
              key: username
              optional: true
        - name: GIT_PASSWORD
          valueFrom:
            secretKeyRef:
              name: git-credentials
              key: password
              optional: true
        - name: PIPELINE_RUN_ID
          valueFrom:
            fieldRef:
              fieldPath: metadata.labels['tekton.dev/pipelineRun']
        - name: PIPELINE_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
      script: |
        #!/usr/bin/env bash

        BASE_URL=$(oc whoami --show-console)
        TARGET_URL="${BASE_URL}/k8s/ns/${PIPELINE_NAMESPACE}/tekton.dev~v1beta1~PipelineRun/${PIPELINE_RUN_ID}"

        SOURCE="$(params.git-status-url)"
        PATTERN="{sha}"
        VALUE="$(params.git-revision)"
        GIT_API_URL="${SOURCE/$PATTERN/$VALUE}"

        echo "Updating build status via ${GIT_API_URL}"
        echo "Setting target URL to: ${TARGET_URL}"
        echo "Build status is: $(params.build-status)"
        
        HTTP_STATUS=$(curl -s -o /dev/null -w "%{http_code}" \
             -H "Accept: application/vnd.github.v3+json" \
             -u "${GIT_USER}:${GIT_PASSWORD}" \
             --request POST \
             --data "{\"context\": \"continuous-integration/tekton\", \"state\": \"$(params.build-status)\", \"description\": \"$(params.build-status-descr)\", \"target_url\": \"${TARGET_URL}\"}" \
             $GIT_API_URL)

        echo "HTTP Status code from API: ${HTTP_STATUS}"